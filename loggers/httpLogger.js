// // Import Morgan middleware for logging HTTP requests in Express
// // Morgan can log request method, URL, status, response time, etc.
// const morgan = require("morgan");
// // Defines JSON format for Morgan logs
// // Bypassed by custom format below due to security issues
// // const json = require('morgan-json')


// // Custom Morgan format for JSON logs
// // Generates custom JSON string for each HTTP request, 
// // Uses Morgan's built-in tokens to get details from (req, res)
// const json = (tokens, req, res) => {
//   return JSON.stringify({
//     // Log HTTP method (GET, POST, etc.)
//     method: tokens.method(req, res),
//     // Log the URL
//     url: tokens.url(req, res),
//     // Log HTTP status code (200, 404, 500, etc.)
//     status: tokens.status(req, res),
//     // Log the time, in ms, server takes to respond
//     responseTime: tokens["response-time"](req, res) + " ms",
//     // Logs the current date in ISO format
//     date: tokens.date(req, res, "iso"),
//     // Logs the referrer, or an empty string if no ref
//     referrer: tokens.referrer(req, res) || "",
//     // Logs the user agent, info from the browser
//     userAgent: tokens["user-agent"](req, res),
//   });
// };

// // Calls json function to make JSON format for Morgan
// const format = json({
//   // Morgan tokens get replaced with values from req, res
//   method: ":method",
//   url: ":url",
//   status: ":status",
//   contentLength: ":res[content-length]",
//   responseTime: ":response-time"
// });

// // Import custom logger, typically set up with Winston
// // Records log entries generated by Morgan
// const logger = require("./logger")
// // Tell Morgan to use custom JSON format above to log HTTP requests
// const httpLogger = morgan(format, {
//   // Stream specifies where to write logs
//   stream: {
//     // Write method is called every time a log is written
//     write: (message) => {
//       // Parse the JSON string from json func back into an object
//       const {
//       method,
//       url,
//       status,
//       contentLength,
//       responseTime
//     } = JSON.parse(message)
//       // Calls the custom logger to log the parsed object
//       // info method adds new log entry w/message & JSON details
//       logger.info("HTTP Access Log", {
//         // Add current date and time
//         timestamp: new Date().toString(),
//         // These values are parsed from message above
//         method,
//         url,
//         // Converted from string to num
//         status: Number(status),
//         contentLength,
//         // Converted from string to num
//         responseTime: Number(responseTime)
//       });
//     }
//   }
// })

// module.exports = httpLogger;

const morgan = require('morgan');
const logger = require('../loggers/logger');

// Define custom tokens using morgan.token()
morgan.token('customMethod', (req, res) => req.method);
morgan.token('customUrl', (req, res) => req.originalUrl || req.url);
morgan.token('customStatus', (req, res) => res.statusCode);
morgan.token('customContentLength', (req, res) => res.getHeader('Content-Length') || 0);
morgan.token('customResponseTime', (req, res) => {
  const responseTime = res.getHeader('X-Response-Time');
  return responseTime ? `${responseTime} ms` : '-';
});

// Define the format as a JSON string
const format = `{
  "method": ":customMethod",
  "url": ":customUrl",
  "status": ":customStatus",
  "contentLength": ":customContentLength",
  "responseTime": ":customResponseTime",
  "timestamp": ":date[iso]"
}`;

const httpLogger = morgan(format, {
  stream: {
    write: (message) => {
      // Parse message to an object
      const logDetails = JSON.parse(message);
      logger.info('HTTP Access Log', logDetails);
    }
  }
});

module.exports = httpLogger;
